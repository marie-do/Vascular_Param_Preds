# -*- coding: utf-8 -*-
"""visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eZqH23OUJdJScuRiAYzXRoCOG-YoRoJb
"""

def get_data(file):
    mesh = pv.read(file)
    point_data = mesh.point_data
    cell_data = mesh.cell_data
    cell_types = mesh.celltypes
    cells = mesh.cells
    bounds = mesh.bounds
    num_points = mesh.n_points
    num_cells = mesh.n_cells

    print("Point Data Arrays:", point_data.keys())
    print("Cell Data Arrays:", cell_data.keys())
    print("Cell Types:", cell_types)
    print("Cells:", cells)
    print("Bounds:", bounds)
    print("Number of Points:", num_points)
    print("Number of Cells:", num_cells)

    is_volumetric = any(cell_type in [10, 12, 13] for cell_type in cell_types)
    if is_volumetric:
        print("This is a volumetric mesh with interior cells and points.")
    else:
        print("This is a surface mesh.")

    return mesh, point_data, cell_data


def get_pressure(mesh, time_step):
    pressure = mesh.point_data[f'pressure_{time_step}']
    pressure_mmHg = pressure / 1333
    return pressure_mmHg


def visualize_pressure(mesh, time_step, visualize_volume=False):
    mesh.plot(volume=visualize_volume, scalars=f'pressure_{time_step}', cmap='coolwarm', scalar_bar_args={'title': 'Pressure (mmHg)'})


def get_velocity(mesh, time_step):
    velocity = mesh.point_data[f'velocity_{time_step}']
    return velocity


def visualize_velocity(mesh, time_step):
    arrows = mesh.glyph(orient=f'velocity_{time_step}', scale=f'velocity_{time_step}', factor=0.1)
    plotter = pv.Plotter()
    plotter.add_mesh(arrows, cmap='coolwarm', scalar_bar_args={'title': 'Velocity Magnitude'})
    plotter.show()

!apt-get install -qq xvfb libgl1-mesa-glx
!pip install pyvista -qq

import os
import pyvista as pv

pv.set_jupyter_backend('static')
pv.global_theme.notebook = True
pv.start_xvfb()

model = "0103_0001"
time_step = 0.21
base_dir = "result/mesh"

file_base = os.path.join(base_dir, model, f"{time_step:.2f}")
file_pred = f"{file_base}_pred.vtk"
file_target = f"{file_base}_target.vtk"

mesh_pred = pv.read(file_pred)
mesh_target = pv.read(file_target)
visualize_pressure(mesh_pred, time_step)
visualize_pressure(mesh_target, time_step)
visualize_velocity(mesh_pred, time_step)
visualize_velocity(mesh_target, time_step)