# -*- coding: utf-8 -*-
"""test skel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1neDE_59q1J8Xk4qwlSRiiweYjh8dP3qC
"""

!pip install open3d
!pip install pyvista

import open3d as o3d
import pyvista as pv
pv.set_jupyter_backend('static')


# TESTING
model.eval()
test_loss1 = 0.0
test_loss2 = 0.0
test_total_loss = 0.0

save_path = "result"

with torch.no_grad():
    for batch in test_dataloader:
        coordinates = batch['coord'].to(torch.float32).to(device)
        segments = batch['segment'].to(torch.float32).to(device).transpose(1, 2)
        lfs = batch['lfs'].to(torch.float32).to(device).transpose(1, 2)
        time_steps = batch['time'].to(torch.float32).to(device)
        name = batch['name'][0]
        time_step = batch['time'][0, 0].item()

        inputs = torch.cat((coordinates,lfs, time_steps), dim=2).transpose(1, 2)

        outputs = model(inputs)

        loss1 = criterion1(outputs, segments)
        loss2 = navier_loss(model, inputs) if use_navier_loss else torch.tensor(0.0, device=device)
        loss = loss1 + loss2

        test_loss1 += loss1.item()
        test_loss2 += loss2.item()
        test_total_loss += loss.item()

        pred = outputs[0].transpose(0,1)
        target = segments[0].transpose(0,1)

        pred_pressure, pred_velocity = pred[:, 0], pred[:, 1:]
        target_pressure, target_velocity = target[:, 0], target[:, 1:]

        global_min_pressure = min(pred_pressure.min(), target_pressure.min())
        global_max_pressure = max(pred_pressure.max(), target_pressure.max())
        global_min_velocity = min(pred_velocity.min(), target_velocity.min())
        global_max_velocity = max(pred_velocity.max(), target_velocity.max())

        pred_norm_pressure = (pred_pressure - global_min_pressure) / (global_max_pressure - global_min_pressure)
        pred_norm_velocity = (pred_velocity - global_min_velocity) / (global_max_velocity - global_min_velocity)
        target_norm_pressure = (target_pressure - global_min_pressure) / (global_max_pressure - global_min_pressure)
        target_norm_velocity = (target_velocity - global_min_velocity) / (global_max_velocity - global_min_velocity)

        colormap = plt.get_cmap('viridis')
        pred_pressure_colors = colormap(pred_norm_pressure.cpu().numpy())[:, :3]
        target_pressure_colors = colormap(target_norm_pressure.cpu().numpy())[:, :3]
        pred_velocity_colors = pred_norm_velocity.cpu().numpy()
        target_velocity_colors = target_norm_velocity.cpu().numpy()

        pcd_pred_pressure = o3d.geometry.PointCloud()
        pcd_pred_pressure.points = o3d.utility.Vector3dVector(coordinates[0].cpu().numpy())
        pcd_pred_pressure.colors = o3d.utility.Vector3dVector(pred_pressure_colors)

        pcd_target_pressure = o3d.geometry.PointCloud()
        pcd_target_pressure.points = o3d.utility.Vector3dVector(coordinates[0].cpu().numpy())
        pcd_target_pressure.colors = o3d.utility.Vector3dVector(target_pressure_colors)

        pcd_pred_velocity = o3d.geometry.PointCloud()
        pcd_pred_velocity.points = o3d.utility.Vector3dVector(coordinates[0].cpu().numpy())
        pcd_pred_velocity.colors = o3d.utility.Vector3dVector(pred_velocity_colors)

        pcd_target_velocity = o3d.geometry.PointCloud()
        pcd_target_velocity.points = o3d.utility.Vector3dVector(coordinates[0].cpu().numpy())
        pcd_target_velocity.colors = o3d.utility.Vector3dVector(target_velocity_colors)

        pressure_pred_save_path = os.path.join(save_path, "pressure", f"{name}", f"{time_step}_pred.ply")
        pressure_target_save_path = os.path.join(save_path, "pressure", f"{name}", f"{time_step}_target.ply")
        velocity_pred_save_path = os.path.join(save_path, "velocity", f"{name}", f"{time_step}_pred.ply")
        velocity_target_save_path = os.path.join(save_path, "velocity", f"{name}", f"{time_step}_target.ply")
        os.makedirs(os.path.dirname(pressure_pred_save_path), exist_ok=True)
        os.makedirs(os.path.dirname(pressure_target_save_path), exist_ok=True)
        os.makedirs(os.path.dirname(velocity_pred_save_path), exist_ok=True)
        os.makedirs(os.path.dirname(velocity_target_save_path), exist_ok=True)
        o3d.io.write_point_cloud(pressure_pred_save_path, pcd_pred_pressure)
        o3d.io.write_point_cloud(pressure_target_save_path, pcd_target_pressure)
        o3d.io.write_point_cloud(velocity_pred_save_path, pcd_pred_velocity)
        o3d.io.write_point_cloud(velocity_target_save_path, pcd_target_velocity)

        mesh_pred = pv.PolyData(coordinates[0].cpu().numpy())
        mesh_target = pv.PolyData(coordinates[0].cpu().numpy())
        mesh_pred.point_data[f'pressure_{time_step}'] = pred_pressure.cpu().numpy()
        mesh_target.point_data[f'pressure_{time_step}'] = target_pressure.cpu().numpy()
        mesh_pred.point_data[f'velocity_{time_step}'] = pred_velocity.cpu().numpy()
        mesh_target.point_data[f'velocity_{time_step}'] = target_velocity.cpu().numpy()
        velocity_pred_save_path = os.path.join(save_path, "mesh", f"{name}", f"{time_step}_pred.vtk")
        velocity_target_save_path = os.path.join(save_path, "mesh", f"{name}", f"{time_step}_target.vtk")
        os.makedirs(os.path.dirname(velocity_pred_save_path), exist_ok=True)
        os.makedirs(os.path.dirname(velocity_target_save_path), exist_ok=True)
        mesh_pred.save(velocity_pred_save_path)
        mesh_target.save(velocity_target_save_path)

avg_test_loss1 = test_loss1 / len(test_dataloader)
avg_test_loss2 = test_loss2 / len(test_dataloader)
avg_test_total_loss = test_total_loss / len(test_dataloader)

print(f'Test Loss1: {avg_test_loss1:.4f}, Loss2: {avg_test_loss2:.4f}, Total Loss: {avg_test_total_loss:.4f}')

writer.add_scalar("Loss/test_loss1", avg_test_loss1, num_epochs)
writer.add_scalar("Loss/test_loss2", avg_test_loss2, num_epochs)
writer.add_scalar("Loss/test_total_loss", avg_test_total_loss, num_epochs)